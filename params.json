{"name":"Nl3","tagline":"nl3  - Natural Language Triples","body":"## nl3 - Natural Language Triples\r\n\r\n<p align=\"center\">\r\n  <a href=\"https://gemnasium.com/defstream/nl3\"><img src=\"https://img.shields.io/gemnasium/defstream/nl3.svg\"\r\n       alt=\"Gemnasium\"></a>\r\n\r\n  <a href=\"https://travis-ci.org/defstream/nl3\"><img src=\"https://img.shields.io/travis/defstream/nl3.svg\"\r\n       alt=\"build status\"></a>\r\n\r\n  <a href=\"https://codecov.io/github/defstream/nl3\"><img src=\"https://img.shields.io/codecov/c/github/defstream/nl3.svg\"\r\n        alt=\"coverage\"></a>\r\n\r\n  <a href=\"https://circleci.com/gh/defstream/nl3\"><img src=\"https://img.shields.io/circleci/project/defstream/nl3.svg\"\r\n       alt=\"coverage\"></a>\r\n\r\n   <a href=\"http://npmjs.com/package/nl3\"><img src=\"https://img.shields.io/npm/v/nl3.svg\"\r\n        alt=\"npm version\"></a>\r\n</p>\r\n\r\n<p align=\"center\">\r\n  <a href=\"https://gitter.im/defstream/nl3\"><img src=\"https://img.shields.io/gitter/room/defstream/nl3.svg\"\r\n     alt=\"Chat\"></a>\r\n</p>\r\n\r\n**nl3** is a natural language triple library, used for parsing triples from plain english.\r\nCurrently nl3 is best at generating triples from  simple short phrases that contain the Subject, Predicate and Object in order.\r\n\r\n#### What is a triple?\r\nA triple is a data structure that represents a Subject, Predicate and Object or S P O.\r\n\r\n**More Information**\r\n- https://en.wikipedia.org/wiki/Triplestore\r\n- https://en.wikipedia.org/wiki/Resource_Description_Framework\r\n\r\n#### TLDR;\r\n\r\n```javascript\r\nvar nl3 = require('nl3')({\r\n/**\r\n* Specifies valid triples in plain english ex: 'Subject Predicate Object'.\r\n* All values will be singularized.\r\n* @type {Array}\r\n*/\r\n  grammar: [\r\n    'users message users'\r\n  ],\r\n/**\r\n* Extend your vocabulary by mapping word stems to existing predicates.\r\n* @type {Object}\r\n*/\r\n  vocabulary: {\r\n    msg: 'message',     // user bob msgs user tom\r\n    messag: 'message',  // user bob messaged user jill\r\n    contact: 'message'  // user bob contacted user bill\r\n  }\r\n});\r\n```\r\n\r\nThe client returned is able to parse these queries.\r\n\r\n```javascript\r\nnl3.parse('user jack msg user jill');\r\nnl3.parse('user jack msgs user jill');\r\nnl3.parse('user jack messaged user jill');\r\nnl3.parse('user jack contacted user jill');\r\nnl3.parse('user jack contacts user jill');\r\n```\r\n\r\nAll of which will have the same output.\r\n\r\n```javascript\r\n{\r\n  subject: {\r\n    type: 'user',\r\n    value: 'jack'\r\n  },\r\n  predicate: {\r\n    value: 'message'\r\n  },\r\n  object: {\r\n    type: 'user',\r\n    value: 'jill'\r\n  }\r\n}\r\n```\r\n\r\n# Installation\r\n\r\n```shell\r\n$ npm install nl3 --save\r\n```\r\n\r\n# Development Scripts\r\nBefore running any development scripts, be sure to first install the dev modules.\r\n\r\n```shell\r\n$ npm install nl3 --save --dev\r\n```\r\n\r\n#### Build Documentation\r\nOutputs code documentation files to the `./doc/api` folder.\r\n\r\n```shell\r\n$ npm run doc\r\n```\r\n\r\n#### Static Analysis\r\nOutputs static analysis files to the `./doc/analysis` folder.\r\n\r\n```shell\r\n$ npm run analyze\r\n```\r\n\r\n#### Test + Coverage\r\nOutputs code coverage files to the `./doc/coverage` folder.\r\n\r\n```shell\r\n$ npm run test\r\n```\r\n\r\n**CURRENT COVERAGE REPORT**\r\n\r\n![codecov.io](https://codecov.io/github/defstream/nl3/branch.svg?branch=master)\r\n\r\n# API\r\n\r\n### `nl3(options)`\r\n\r\nCreate an nl3 instance.\r\n\r\n**parameters:**\r\n- **options**            {Object}    The options for the nl3 client.\r\n- **options.grammar**    {Array}     An array of valid grammar in the format of 'S P O'.\r\n- **options.vocabulary** {Array}     An object mapping the phonetic root of an object to a predicate.\r\n\r\n\r\n**returns**: a new instance of the nl3 client.\r\n\r\nExample\r\n\r\n```javascript\r\nvar nl3 = require('nl3')({\r\n/**\r\n* Specify valid triples in plain english ex: 'Subject Predicate Object'.\r\n* The Subject, Predicate and Object will be will be singularized, if presented in any tense.\r\n* @type {Array}\r\n*/\r\n  grammar: [\r\n    'users message users'\r\n  ],\r\n/**\r\n* Extend the vocabulary of your predicates by mapping word stems to existing predicates within your grammar.\r\n* @type {Object}\r\n*/\r\n  vocabulary: {\r\n    msg: 'message',     // user bob msgs user tom\r\n    messag: 'message',  // user bob messaged user jill\r\n    contact: 'message'  // user bob contacted user bill\r\n  }\r\n});\r\n```\r\n\r\n### `nl3.parse( text )`\r\n\r\n**parameters:**\r\n- **text**:  {String}  A string containing a S P O phrase in plain english.\r\n**returns**: A triple containing the results of of the parsed Subject Predicate and Object.\r\n\r\nExample\r\n\r\n```javascript\r\n\r\nvar nl3 = require('nl3')({\r\n  grammar: [\r\n    'users message users'\r\n  ],\r\n  vocabulary: {\r\n    contact: 'message', // user bob contacted user bill\r\n  }\r\n});\r\n\r\nfunction print (description, triple) {\r\n  console.log(\r\n    description + ' =', JSON.stringify(triple, null, '  ');\r\n  );\r\n};\r\n\r\nprint( 'user jack contacts user jill', nl3.parse('user jack contacts user jill') );\r\n\r\nprint( 'users who message user jill', nl3.parse('users who message user jill') );\r\n\r\n```\r\n\r\n**returns:**\r\n\r\n```javascript\r\n\r\nuser jack contacts user jill = {\r\n  \"subject\": {\r\n    \"type\": \"user\",\r\n    \"value\": \"jack\"\r\n\r\n  },\r\n  \"predicate\": {\r\n    \"value\": \"message\"\r\n  },\r\n  \"object\": {\r\n    \"type\": \"user\",\r\n    \"value\": \"jill\"\r\n  }\r\n}\r\nusers who message user jill = {\r\n  \"subject\": {\r\n    \"type\": \"user\"\r\n  },\r\n  \"predicate\": {\r\n    \"value\": \"message\"\r\n  },\r\n  \"object\": {\r\n    \"type\": \"user\",\r\n    \"value\": \"jill\"\r\n  }\r\n}\r\n\r\n```\r\n\r\n### vNext\r\nSupport for natural random order queries, these are not in (SPO) order, such as messages that user bob created (OSP), created messages by user jill (POS), created by user jill messages (PSO), (SO) user jills messages, (OS) messages for user jill.\r\n\r\n```javascript\r\n\r\n  nl3.parse('users that follow user 42');\r\n  nl3.parse('users followed by user 42');\r\n  nl3.parse('messages from user 42');\r\n  nl3.parse('messages by user 32');\r\n\r\n```\r\n\r\n### The Backlog...\r\n- Support for misspelled subjects & objects ( nearest neighbor )\r\n","google":"UA-32153623-2","note":"Don't delete this file! It's used internally to help with page regeneration."}